/* Intemediate Queries using Aggregation, Subqueries, and Common Table Expression.  */

/* Calculate the total revenue generated by each store */
select st.store_id, sum(p.amount)
from payment p
         join staff s on p.staff_id = s.staff_id
         join store st on s.store_id = st.store_id
group by st.store_id;


/* Identify customers who have rented movies more times than the average customer. */
with CustomerRentalCount as (select r.customer_id, count(r.customer_id) as rental_count
                             from rental r
                             group by r.customer_id)

select c.first_name || ' ' || c.last_name as full_name, cc.rental_count
from CustomerRentalCount cc
         join customer c on c.customer_id = cc.customer_id
group by full_name, rental_count
having rental_count > (select avg(rental_count) from CustomerRentalCount)
order by rental_count desc;


/* Find the actor who has appeared in the most rented films. */

-- find film_id of all rented films
with RentedFilms as (select distinct f.film_id
                     from rental
                              join inventory using (inventory_id)
                              join film f on inventory.film_id = f.film_id)

select a.first_name || ' ' || a.last_name as full_name, count(fa.film_id) as counts
from film_actor fa
         join RentedFilms on RentedFilms.film_id = fa.film_id
         join actor a on fa.actor_id = a.actor_id
group by full_name
order by counts desc
limit 1;


/* Analyze how the popularity of different film categories has changed over time (e.g., month by month or year by year). */
select c.name, extract(year from r.rental_date) as year, count(r.rental_id) as rental_count
from rental r
         join inventory i using (inventory_id)
         join film f on i.film_id = f.film_id
         join film_category fc on f.film_id = fc.film_id
         join category c on fc.category_id = c.category_id
group by c.name, year
order by c.name, year;



/* List films that were never rented out during the year of 2005. */
-- This approach doesn't work since a film often has multiple copies in inventory, and it will return records if any inventory item wasn't rented
select distinct f.title
from film f
         join inventory i on f.film_id = i.film_id
         left join rental r on i.inventory_id = r.inventory_id and extract(year from r.rental_date) = 2005
where r.rental_id is null;

-- This approach is better since it accuratly returns only films that have not been rented, regaurdless of copies in inventory.
-- This is achieved grouping by title, and using a condition in the having clause to filter out groups that have been rented.
select f.title
from film f
         join inventory i on f.film_id = i.film_id
         left join rental r on i.inventory_id = r.inventory_id and extract(year from r.rental_date) = 2005
group by f.title
having count(r.rental_id) = 0;

